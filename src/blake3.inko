# Ported from [the reference implementation](https://github.com/BLAKE3-team/BLAKE3/blob/1.5.0/reference_impl/reference_impl.rs).

import std.cmp.(min)
import std.crypto.hash.(Hash, Hasher)

import blake3.util.(ByteArraySlice, ByteArraySliceMut, U32_MASK, u32_rotate_right, u32_to_le_bytes, u32_wrapping_add)

let OUT_LEN = 32
let KEY_LEN = 32
let BLOCK_LEN = 64
let CHUNK_LEN = 1024

let CHUNK_START = 1 << 0
let CHUNK_END = 1 << 1
let PARENT = 1 << 2
let ROOT = 1 << 3

let IV = [
  0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19,
]

let MSG_PERMUTATION = [2, 6, 3, 10, 7, 0, 4, 13, 1, 11, 12, 5, 9, 14, 15, 8]

fn g(state: mut Array[Int], a: Int, b: Int, c: Int, d: Int, mx: Int, my: Int) {
  state.set(a, u32_wrapping_add(u32_wrapping_add(state.get(a), state.get(b)), mx))
  state.set(d, u32_rotate_right(state.get(d) ^ state.get(a), 16))
  state.set(c, u32_wrapping_add(state.get(c), state.get(d)))
  state.set(b, u32_rotate_right(state.get(b) ^ state.get(c), 12))
  state.set(a, u32_wrapping_add(u32_wrapping_add(state.get(a), state.get(b)), my))
  state.set(d, u32_rotate_right(state.get(d) ^ state.get(a), 8))
  state.set(c, u32_wrapping_add(state.get(c), state.get(d)))
  state.set(b, u32_rotate_right(state.get(b) ^ state.get(c), 7))
}

fn round(state: mut Array[Int], m: ref Array[Int]) {
  g(state, 0, 4, 8, 12, m.get(0), m.get(1))
  g(state, 1, 5, 9, 13, m.get(2), m.get(3))
  g(state, 2, 6, 10, 14, m.get(4), m.get(5))
  g(state, 3, 7, 11, 15, m.get(6), m.get(7))
  g(state, 0, 5, 10, 15, m.get(8), m.get(9))
  g(state, 1, 6, 11, 12, m.get(10), m.get(11))
  g(state, 2, 7, 8, 13, m.get(12), m.get(13))
  g(state, 3, 4, 9, 14, m.get(14), m.get(15))
}

fn permute(m: mut Array[Int]) {
  let mut permuted = Array.filled(with: 0, times: 16)

  0.to(15).iter.each fn (i) {
    permuted.set(i, m.get(MSG_PERMUTATION.get(i)))
  }

  m.clear

  permuted.iter.each fn (word) {
    m.push(word)
  }
}

fn compress(
  chaining_value: ref Array[Int],
  block_words: ref Array[Int],
  counter: Int,
  block_len: Int,
  flags: Int,
) -> Array[Int] {
  let state = [
    chaining_value.get(0),
    chaining_value.get(1),
    chaining_value.get(2),
    chaining_value.get(3),
    chaining_value.get(4),
    chaining_value.get(5),
    chaining_value.get(6),
    chaining_value.get(7),
    IV.get(0),
    IV.get(1),
    IV.get(2),
    IV.get(3),
    counter & U32_MASK,
    counter >>> 32,
    block_len,
    flags,
  ]
  let block = block_words.clone

  round(mut state, block)
  permute(mut block)
  round(mut state, block)
  permute(mut block)
  round(mut state, block)
  permute(mut block)
  round(mut state, block)
  permute(mut block)
  round(mut state, block)
  permute(mut block)
  round(mut state, block)
  permute(mut block)
  round(mut state, block)

  0.to(7).iter.each fn (i) {
    state.set(i, state.get(i) ^ state.get(i + 8))
    state.set(i + 8, state.get(i + 8) ^ chaining_value.get(i))
  }

  state
}

fn first_8_words(compression_output: ref Array[Int]) -> Array[Int] {
  let words = Array.with_capacity(8)

  0.to(7).iter.each fn (i) {
    words.push(compression_output.get(i))
  }

  words
}

fn words_from_little_endian_bytes(bytes: ref ByteArray, words: mut Array[Int]) {
  let mut byte = bytes.iter

  0.until(bytes.size).step_by(4).each_with_index fn (word_index, byte_range) {
    let word = 0.to(3).iter.reduce(words.get(word_index)) fn (word, i) {
      word | (bytes.get(byte_range.start + i) << (i * 8))
    }

    words.set(word_index, word)
  }
}

class Output {
  let @input_chaining_value: Array[Int]
  let @block_words: Array[Int]
  let @counter: Int
  let @block_len: Int
  let @flags: Int

  fn chaining_value -> Array[Int] {
    first_8_words(compress(
      @input_chaining_value,
      @block_words,
      @counter,
      @block_len,
      @flags,
    ))
  }

  fn root_output_bytes(out_slice: ByteArraySliceMut) {
    let mut output_block_counter = 0

    0.until(out_slice.size).step_by(2 * OUT_LEN).each fn move (out_block_range) {
      let mut out_block = out_slice.slice(start: out_block_range.start, size: 2 * OUT_LEN).to_byte_array

      let words = compress(
        @input_chaining_value,
        @block_words,
        output_block_counter,
        @block_len,
        @flags | ROOT,
      )

      words.iter.zip(0.until(out_block.size).step_by(4)).each fn (pair) {
        let word = pair.0
        let out_word_range = pair.1
        let bytes = u32_to_le_bytes(word)

        if out_block_range.size % 4 != 0 {
          bytes.resize(size: out_block_range.size % 4, value: 0)
        }

        out_slice.replace(start: out_block_range.start + out_word_range.start, bytes: bytes)
      }

      output_block_counter += 1
    }
  }
}

class ChunkState {
  let @chaining_value: Array[Int]
  let @chunk_counter: Int
  let @block: ByteArray
  let @block_len: Int
  let @blocks_compressed: Int
  let @flags: Int

  fn pub static new(key_words: Array[Int], chunk_counter: Int, flags: Int) -> ChunkState {
    ChunkState {
      @chaining_value = key_words,
      @chunk_counter = chunk_counter,
      @block = ByteArray.filled(with: 0, times: BLOCK_LEN),
      @block_len = 0,
      @blocks_compressed = 0,
      @flags = flags,
    }
  }

  fn len -> Int {
    (BLOCK_LEN * @blocks_compressed) + @block_len
  }

  fn start_flag -> Int {
    if @blocks_compressed == 0 {
      CHUNK_START
    } else {
      0
    }
  }

  fn mut update(input: ByteArraySlice) {
    let mut input = input

    while input.size > 0 {
      if @block_len == BLOCK_LEN {
        let block_words = Array.filled(with: 0, times: 16)

        words_from_little_endian_bytes(@block, mut block_words)

        @chaining_value = first_8_words(compress(
          @chaining_value,
          block_words,
          @chunk_counter,
          BLOCK_LEN,
          @flags | start_flag,
        ))

        @blocks_compressed += 1
        @block = ByteArray.filled(with: 0, times: BLOCK_LEN)
        @block_len = 0
      }

      let want = BLOCK_LEN - @block_len
      let take = min(want, input.size)

      ByteArraySliceMut.new(mut @block, start: 0, size: @block.size)
        .replace(start: @block_len, bytes: input.slice(start: 0, size: take).to_byte_array)
      @block_len += take
      input = input.slice(start: take, size: input.size - take)
    }
  }

  fn output -> Output {
    let block_words = Array.filled(with: 0, times: 16)

    words_from_little_endian_bytes(@block, mut block_words)

    Output {
      @input_chaining_value = @chaining_value.clone,
      @block_words = block_words,
      @counter = @chunk_counter,
      @block_len = @block_len,
      @flags = @flags | start_flag | CHUNK_END,
    }
  }
}

fn parent_output(
  left_child_cv: ref Array[Int],
  right_child_cv: ref Array[Int],
  key_words: ref Array[Int],
  flags: Int,
) -> Output {
  let block_words = Array.filled(with: 0, times: 16)

  0.to(7).iter.each fn (i) {
    block_words.set(i, left_child_cv.get(i))
    block_words.set(i + 8, right_child_cv.get(i))
  }

  Output {
    @input_chaining_value = key_words.clone,
    @block_words = block_words,
    @counter = 0,
    @block_len = BLOCK_LEN,
    @flags = PARENT | flags,
  }
}

fn parent_cv(
  left_child_cv: ref Array[Int],
  right_child_cv: ref Array[Int],
  key_words: ref Array[Int],
  flags: Int,
) -> Array[Int] {
  parent_output(left_child_cv, right_child_cv, key_words, flags).chaining_value
}

class pub Blake3 {
  let @chunk_state: ChunkState
  let @key_words: Array[Int]
  let @cv_stack: Array[Array[Int]]
  let @flags: Int

  fn static new_internal(key_words: Array[Int], flags: Int) -> Blake3 {
    Blake3 {
      @chunk_state = ChunkState.new(key_words.clone, 0, flags),
      @key_words = key_words,
      @cv_stack = Array.with_capacity(54),
      @flags = flags,
    }
  }

  fn pub static new -> Blake3 {
    new_internal(IV.clone, 0)
  }

  fn mut add_chunk_chaining_value(new_cv: Array[Int], total_chunks: Int) {
    let mut new_cv = new_cv
    let mut total_chunks = total_chunks

    while total_chunks & 1 == 0 {
      new_cv = parent_cv(@cv_stack.pop.unwrap.clone, new_cv, @key_words, @flags)
      total_chunks >>>= 1
    }

    @cv_stack.push(new_cv)
  }

  fn mut update(input: ByteArraySlice) {
    let mut input = input

    while input.size > 0 {
      if @chunk_state.len == CHUNK_LEN {
        let chunk_cv = @chunk_state.output.chaining_value
        let total_chunks = @chunk_state.chunk_counter + 1

        add_chunk_chaining_value(chunk_cv, total_chunks)
        @chunk_state = ChunkState.new(@key_words.clone, total_chunks, @flags)
      }

      let want = CHUNK_LEN - @chunk_state.len
      let take = min(want, input.size)

      @chunk_state.update(input.slice(start: 0, size: take))
      input = input.slice(start: take, size: input.size - take)
    }
  }
}

impl Hasher for Blake3 {
  fn pub mut write(bytes: ref ByteArray) {
    update(ByteArraySlice.new(bytes, 0, bytes.size))
  }

  fn pub move finish -> Hash {
    let out_bytes = ByteArray.filled(with: 0, times: OUT_LEN)

    {
      let out_slice = ByteArraySliceMut.new(mut out_bytes, 0, OUT_LEN)
      let mut output = @chunk_state.output
      let mut parent_nodes_remaining = @cv_stack.size

      while parent_nodes_remaining > 0 {
        parent_nodes_remaining -= 1
        output = parent_output(
          @cv_stack.get(parent_nodes_remaining),
          output.chaining_value,
          @key_words,
          @flags,
        )
      }

      output.root_output_bytes(out_slice)
    }

    Hash.new(out_bytes)
  }
}
